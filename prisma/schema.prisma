generator client {
  provider = "prisma-client-js"
  // output   = "generated"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum UserRole {
  admin
  operational
  teacher

  @@map("user_role")
}

enum LessonStatus {
  scheduled
  canceled
  completed

  @@map("lesson_status")
}

enum Tier {
  A
  B
  C
  D

  @@map("tier")
}

enum ReasonsToNotAttend {
  climatic
  health
  cancelled
  no_teacher
  no_justification

  @@map("reasons_to_not_attend")
}

model User {
  id         String   @id @default(cuid())
  name       String
  user       String   @unique
  passwd     String
  email      String
  role       UserRole @default(operational)
  teacher_id String?  @unique
  teacher    Athlete? @relation(fields: [teacher_id, name], references: [id, name])

  created_at DateTime @default(now())
  updated_at DateTime @updatedAt

  @@unique([teacher_id, name])
  @@map("user")
}

model Athlete {
  id            String   @id @default(cuid())
  name          String   @unique
  birthday      DateTime
  phone         String
  responsible   String?
  date_start    DateTime
  pix_key       String
  cpf           String?
  address_id    String?  @unique
  is_student    Boolean  @default(false)
  is_associated Boolean  @default(false)
  is_teacher    Boolean  @default(false)
  tier          Tier     @default(D)

  user    User?
  address Address? @relation(fields: [address_id], references: [id])

  created_at               DateTime              @default(now())
  updated_at               DateTime              @updatedAt
  investments              Investment[]
  investment_group_athlete InvestmentGroup[]     @relation("athlete_investment_group")
  investment_group_pair    InvestmentGroup[]     @relation("pair_investment_group")
  teacher_availability     TeacherAvailability[]
  lesson                   Lesson[]
  lesson_attendance        LessonAttendance[]

  @@unique([id, name])
  @@map("athlete")
}

model Investment {
  id                  String    @id @default(cuid())
  investment_type_id  String
  athlete_id          String
  value               Float
  description         String
  date                DateTime
  paid                DateTime?
  proof               String?
  investment_group_id String?
  created_at          DateTime  @default(now())
  updated_at          DateTime  @updatedAt

  athlete          Athlete          @relation(fields: [athlete_id], references: [id])
  investment_type  InvestmentType   @relation(fields: [investment_type_id], references: [id])
  investment_group InvestmentGroup? @relation(fields: [investment_group_id], references: [id])

  @@map("investment")
}

model InvestmentType {
  id          String     @id @default(cuid())
  name        String     @unique
  description String
  can_see     UserRole[]

  created_at  DateTime     @default(now())
  updated_at  DateTime     @updatedAt
  investments Investment[]

  @@map("investment_type")
}

model InvestmentGroup {
  id            String  @id @default(cuid())
  athlete_id    String
  pair_id       String?
  tournament_id String?
  podium        String?
  description   String?
  pair_amount   Int?
  km            Float?
  km_racional   Float?

  investments Investment[]
  athlete     Athlete      @relation(fields: [athlete_id], references: [id], name: "athlete_investment_group")
  pair        Athlete?     @relation(fields: [pair_id], references: [id], name: "pair_investment_group")
  tournament  Tournament?  @relation(fields: [tournament_id], references: [id])
  created_at  DateTime     @default(now())
  updated_at  DateTime     @updatedAt

  @@map("investment_group")
}

model Arena {
  id         String @id @default(cuid())
  name       String
  address_id String @unique

  address Address @relation(fields: [address_id], references: [id])

  tournaments Tournament[]
  created_at  DateTime     @default(now())
  updated_at  DateTime     @updatedAt

  @@unique([name, address_id])
  @@map("arena")
}

model Tournament {
  id          String   @id @default(cuid())
  name        String
  date_from   DateTime
  date_to     DateTime
  description String?
  arena_id    String

  arena            Arena             @relation(fields: [arena_id], references: [id])
  created_at       DateTime          @default(now())
  updated_at       DateTime          @updatedAt
  investment_group InvestmentGroup[]

  @@unique([name, arena_id, date_from, date_to])
  @@map("tournament")
}

model Courts {
  id        String  @id @default(cuid())
  name      String
  number    Int     @unique
  is_single Boolean @default(false)

  created_at DateTime @default(now())
  updated_at DateTime @updatedAt
  lesson     Lesson[]

  @@map("courts")
}

model Address {
  id           String  @id @default(cuid())
  street       String?
  number       String?
  complement   String?
  neighborhood String?
  city_state   String
  zip_code     String?

  updated_at DateTime @updatedAt
  created_at DateTime @default(now())

  arena   Arena?
  athlete Athlete?

  @@map("address")
}

model TeacherAvailability {
  id         String   @id @default(cuid())
  teacher_id String
  time_start DateTime
  time_end   DateTime
  lesson_id  String?

  updated_at DateTime @updatedAt
  created_at DateTime @default(now())

  teacher Athlete @relation(fields: [teacher_id], references: [id])
  lesson  Lesson? @relation(fields: [lesson_id], references: [id])

  @@map("teacher_availability")
}

model Lesson {
  id         String       @id @default(cuid())
  teacher_id String
  time_start DateTime
  time_end   DateTime
  courts_id  String
  tier       Tier         @default(D)
  status     LessonStatus @default(scheduled)

  updated_at DateTime @updatedAt
  created_at DateTime @default(now())

  teacher Athlete @relation(fields: [teacher_id], references: [id])
  courts  Courts  @relation(fields: [courts_id], references: [id])

  teacher_availability TeacherAvailability[]
  attendances          LessonAttendance[]

  @@map("lesson")
}

model LessonAttendance {
  id         String              @id @default(cuid())
  lesson_id  String
  student_id String
  did_attend Boolean             @default(false)
  reason     ReasonsToNotAttend?

  lesson  Lesson  @relation(fields: [lesson_id], references: [id])
  student Athlete @relation(fields: [student_id], references: [id])

  updated_at DateTime @updatedAt
  created_at DateTime @default(now())

  @@unique([lesson_id, student_id])
  @@map("lesson_attendance")
}
