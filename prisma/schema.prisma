generator client {
  provider = "prisma-client-js"
  // output   = "generated"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum UserRole {
  admin
  operational
  teacher

  @@map("user_role")
}

enum LessonStatus {
  scheduled
  canceled
  completed

  @@map("lesson_status")
}

enum Tier {
  A
  B
  C
  D

  @@map("tier")
}

enum ReasonsToNotAttend {
  climatic
  health
  cancelled
  no_teacher
  no_justification

  @@map("reasons_to_not_attend")
}

model User {
  id         String   @id @default(cuid())
  name       String
  user       String   @unique
  passwd     String
  email      String
  role       UserRole @default(operational)
  teacher_id String?  @unique
  teacher    Member?  @relation(fields: [teacher_id, name], references: [id, name])

  created_at DateTime @default(now())
  updated_at DateTime @updatedAt

  @@unique([teacher_id, name])
  @@map("user")
}

model Member {
  id            String    @id @default(cuid())
  name          String    @unique
  birthday      DateTime
  phone         String
  responsible   String?
  date_start    DateTime?
  pix_key       String?
  cpf           String?
  address_id    String?   @unique
  email         String?
  is_student    Boolean   @default(false)
  is_associated Boolean   @default(false)
  is_teacher    Boolean   @default(false)
  is_athlete    Boolean   @default(false)
  tier          Tier      @default(D)

  user    User?
  address Address? @relation(fields: [address_id], references: [id], onDelete: Cascade)

  created_at                    DateTime               @default(now())
  updated_at                    DateTime               @updatedAt
  investments                   Investment[]
  investment_tournament_athlete InvestmentTournament[] @relation("athlete_investment_tournament")
  investment_tournament_pair    InvestmentTournament[] @relation("pair_investment_tournament")
  teacher_availability          TeacherAvailability[]
  lesson                        Lesson[]
  lesson_attendance             LessonAttendance[]

  @@unique([id, name])
  @@map("member")
}

model Investment {
  id                       String    @id @default(cuid())
  investment_type_id       String
  athlete_id               String
  value                    Float
  description              String
  date                     DateTime
  paid                     DateTime?
  proof                    String?
  investment_tournament_id String?
  created_at               DateTime  @default(now())
  updated_at               DateTime  @updatedAt

  athlete               Member                @relation(fields: [athlete_id], references: [id])
  investment_type       InvestmentType        @relation(fields: [investment_type_id], references: [id])
  investment_tournament InvestmentTournament? @relation(fields: [investment_tournament_id], references: [id])

  @@map("investment")
}

model InvestmentType {
  id          String     @id @default(cuid())
  name        String     @unique
  description String
  can_see     UserRole[]

  created_at  DateTime     @default(now())
  updated_at  DateTime     @updatedAt
  investments Investment[]

  @@map("investment_type")
}

model InvestmentTournament {
  id            String  @id @default(cuid())
  athlete_id    String
  pair_id       String?
  tournament_id String
  podium        String
  description   String?
  pair_amount   Int
  km            Float?

  investments Investment[]
  athlete     Member       @relation(fields: [athlete_id], references: [id], name: "athlete_investment_tournament")
  pair        Member?      @relation(fields: [pair_id], references: [id], name: "pair_investment_tournament")
  tournament  Tournament?  @relation(fields: [tournament_id], references: [id])
  created_at  DateTime     @default(now())
  updated_at  DateTime     @updatedAt

  @@map("investment_tournament")
}

model Arena {
  id         String  @id @default(cuid())
  name       String
  phone      String?
  email      String?
  address_id String  @unique

  address Address @relation(fields: [address_id], references: [id], onDelete: Cascade)

  tournaments Tournament[]
  created_at  DateTime     @default(now())
  updated_at  DateTime     @updatedAt

  @@unique([name, address_id])
  @@map("arena")
}

model Tournament {
  id          String   @id @default(cuid())
  name        String
  date_from   DateTime
  date_to     DateTime
  description String?
  arena_id    String

  arena                 Arena                  @relation(fields: [arena_id], references: [id])
  created_at            DateTime               @default(now())
  updated_at            DateTime               @updatedAt
  investment_tournament InvestmentTournament[]

  @@unique([name, arena_id, date_from, date_to])
  @@map("tournament")
}

model Courts {
  id        String  @id @default(cuid())
  name      String
  number    Int     @unique
  is_single Boolean @default(false)

  created_at DateTime @default(now())
  updated_at DateTime @updatedAt
  lesson     Lesson[]

  @@map("courts")
}

model Address {
  id           String  @id @default(cuid())
  street       String?
  number       String?
  complement   String?
  neighborhood String?
  city_state   String
  zip_code     String?

  updated_at DateTime @updatedAt
  created_at DateTime @default(now())

  arena  Arena?
  member Member?

  @@map("address")
}

model TeacherAvailability {
  id         String   @id @default(cuid())
  teacher_id String
  time_start DateTime
  time_end   DateTime

  updated_at DateTime @updatedAt
  created_at DateTime @default(now())

  teacher Member   @relation(fields: [teacher_id], references: [id])
  lessons Lesson[]

  @@map("teacher_availability")
}

model Lesson {
  id                      String              @id @default(cuid())
  teacher_id              String
  time_start              DateTime
  time_end                DateTime
  courts_id               String
  tier                    Tier                @default(D)
  status                  LessonStatus        @default(scheduled)
  cancellation_reason     ReasonsToNotAttend?
  teacher_availability_id String

  updated_at DateTime @updatedAt
  created_at DateTime @default(now())

  teacher Member @relation(fields: [teacher_id], references: [id])
  courts  Courts @relation(fields: [courts_id], references: [id])

  attendances          LessonAttendance[]
  teacher_availability TeacherAvailability @relation(fields: [teacher_availability_id], references: [id])

  @@map("lesson")
}

model LessonAttendance {
  id         String              @id @default(cuid())
  lesson_id  String
  student_id String
  did_attend Boolean             @default(false)
  reason     ReasonsToNotAttend?

  lesson  Lesson @relation(fields: [lesson_id], references: [id])
  student Member @relation(fields: [student_id], references: [id])

  updated_at DateTime @updatedAt
  created_at DateTime @default(now())

  @@unique([lesson_id, student_id])
  @@map("lesson_attendance")
}

model FixedValues {
  id    String @id @default(cuid())
  name  String @unique
  value Float

  created_at DateTime @default(now())
  updated_at DateTime @updatedAt

  @@map("fixed_values")
}
