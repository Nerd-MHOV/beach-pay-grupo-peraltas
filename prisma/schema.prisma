// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum UserRole {
  admin
  user
}

model User {
  id     String   @id @default(cuid())
  name   String
  user   String   @unique
  passwd String
  email  String
  role   UserRole @default(user)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Athlete {
  id          String   @id @default(cuid())
  name        String   @unique
  birthday    DateTime
  phone       String
  responsible String?
  startDate   DateTime
  pixKey      String

  createdAt                DateTime          @default(now())
  updatedAt                DateTime          @updatedAt
  investments              Investment[]
  investment_group_athlete InvestmentGroup[] @relation("athlete_investment_group")
  investment_group_pair    InvestmentGroup[] @relation("pair_investment_group")
}

model Investment {
  id                String    @id @default(cuid())
  investmentTypeId  String    @map("invetimentTypeId")
  athleteId         String
  value             Float
  description       String
  date              DateTime
  paid              DateTime?
  proof             String?
  investmentGroupId String?

  athlete         Athlete          @relation(fields: [athleteId], references: [id])
  investmentType  InvestmentType   @relation(fields: [investmentTypeId], references: [id])
  createdAt       DateTime         @default(now())
  updatedAt       DateTime         @updatedAt
  investmentGroup InvestmentGroup? @relation(fields: [investmentGroupId], references: [id])
}

model InvestmentType {
  id          String     @id @default(cuid())
  name        String     @unique
  description String
  canSee      UserRole[]

  createdAt   DateTime     @default(now())
  updatedAt   DateTime     @updatedAt
  investments Investment[]
}

model InvestmentGroup {
  id           String  @id @default(cuid())
  athleteId    String
  pairId       String?
  tournamentId String?
  podium       String?
  description  String?
  pairAmount   Int?
  km           Float?
  km_racional  Float?

  investments Investment[]
  athlete     Athlete      @relation(fields: [athleteId], references: [id], name: "athlete_investment_group")
  pair        Athlete?     @relation(fields: [pairId], references: [id], name: "pair_investment_group")
  tournament  Tournament?  @relation(fields: [tournamentId], references: [id])
  createdAt   DateTime     @default(now())
  updatedAt   DateTime     @updatedAt
}

model Arena {
  id   String @id @default(cuid())
  name String
  city String

  tournaments Tournament[]
  createdAt   DateTime     @default(now())
  updatedAt   DateTime     @updatedAt

  @@unique([name, city])
}

model Tournament {
  id          String   @id @default(cuid())
  name        String
  fromDate    DateTime
  toDate      DateTime
  description String?
  arenaId     String

  arena           Arena             @relation(fields: [arenaId], references: [id])
  createdAt       DateTime          @default(now())
  updatedAt       DateTime          @updatedAt
  investmentGroup InvestmentGroup[]

  @@unique([name, arenaId, fromDate, toDate])
}
